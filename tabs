#!/bin/env python2.7

"""
Open a new Terminal session preloaded with your repos.

Tabs is a way of quickly opening and organising your repos within a
single Terminal session. The user can define the mapping between repo
name and location and use the name to open the tab in the correct place.

There are two methods the use has access to; 'Open' and 'Write'.
'Open' opens a new terminal with tabs for each specified repo.
'Write' adds a new repo to the mapping so it can be used in the future
"""

import argparse
import json
import os

json_folder_mapping_path = os.path.join(
    os.path.dirname(__file__),
    'folder_mapping.json'
)


class Tabs(object):

    """A class for writing and opening repo mappings."""

    tab_template = '{tab} --working-directory={dir} --title={title}'

    def __init__(self, json_path):
        """
        Initialise the class.

        :param json_path: The path to the mapping file.
        :type json_path: str
        """
        self.__json_path = json_path
        self.mapping = self.get_json_dictionary(self.__json_path)
        self._command = 'gnome-terminal'

    @property
    def command(self):
        """
        Get the command for opening the tabs.

        :return: The Terminal command.
        :rtype: str
        """
        return self._command

    def get_json_dictionary(self, json_path):
        """
        Read a json file and return a python dictionary.

        Convert from unicode to normal python strings.

        :param json_path: The path to the json file.
        :type json_path: str

        :return: The dictionary representation of the file.
        :rtype: dict
        """
        def unicode_to_str(data):
            if isinstance(data, unicode):
                return str(data)
            if isinstance(data, dict):
                dictionary = {}
                for key, value in data.iteritems():
                    dictionary[unicode_to_str(key)] = unicode_to_str(value)
                return dictionary
            return data

        with file(json_path, 'r') as file_:
            return json.load(file_, object_hook=unicode_to_str)

    def append_command(self, string):
        """
        Append the command string.

        :param string: The string to add to the Terminal command.
        :type string: str
        """
        self._command += string

    def build_tab_string(self, name):
        """
        Build the command for this tab.

        Ignore if the file path does not exist.

        :param name: The name of the tab.
        :type name: str
        :param first_tab: If this is the first tab, specify here.
        :type first_tab: bool

        :return: The tab command for this tab.
        :rtype: str
        """
        tab = ' --tab'
        path = self.mapping.get(name)
        if not path or not os.path.exists(path):
            print 'Ignoring [{0}]: does not exist.'.format(name)
            return
        return self.tab_template.format(
            tab=tab,
            dir=path,
            title=name
        )

    def check_unused_paths(self):
        """Remove old, unused mappings from the json file."""
        for key, path in dict(self.mapping).iteritems():
            if not os.path.exists(path):
                del self.mapping[key]
        self.__write_json()

    def open(self, names=[], list_=False, all_=False):
        """
        Open a new Terminal session with tabs.

        List the available modules if the user has asked for it or
        specified no modules to open, or open all of the available
        modules if the user specifies 'all'.

        :param names: The names of the required modules to open.
        :type names: list
        :param list_: Whether to list the available modules or not.
        :type list_: bool
        :param all_: Whether to open all the available modules or not.
        :type all_: bool
        """
        self.check_unused_paths()
        sorted_keys = sorted(self.mapping.keys())
        if (list_ or not names) and not all_:
            print 'Available Modules:'
            print '  -  '+'\n  -  '.join(sorted_keys)
            return
        if all_:
            names = sorted_keys
        first_line = True
        for name in names:
            line = self.build_tab_string(name)
            if not line:
                continue
            self.append_command(line)
            first_line = False
        if not first_line:  # we have actually added something
            os.system(self.command)

    def __write_json(self):
        """Write to the mapping file with the current mapping dict."""
        with file(self.__json_path, 'w') as file_:
            json.dump(self.mapping, file_, indent=8, sort_keys=True)

    def write(self, name, location):
        """
        Add a new mapping to the mapping file.

        Ignore if a mapping for the name exists or if the location does
        not.

        :param name: The name of the module.
        :type name: str
        :param location: The file path to the module's root level.
        :type location: str
        """
        if self.mapping.get(name) == location or self.mapping.get(name):
            print '[{0}] is already associated with [{1}]'.format(
                name,
                self.mapping[name]
            )
            return
        if os.path.exists(location):
            self.mapping[name] = location
            self.__write_json()
        else:
            print '[{0}] does not exist!'.format(location)


def argument_parser(test_args=None):
    """
    Create the argument parser.

    :param test_args: Arguments for testing purposes.
    :type test_args: list
    """
    description = (
        'Tabs is a convenient way to open a new Terminal session'
        ' with multiple tabs relating to the modules you desire.'
        ' It will also pull any changes from the git repo for you.'
        )
    parser = argparse.ArgumentParser(description=description)
    subparsers = parser.add_subparsers()
    # open tabs arguments
    open_parser = subparsers.add_parser('open')
    open_parser.add_argument(
        '-m',
        '--modules',
        type=str,
        nargs='*',
        help='Names of the modules you want to open.'
    )
    open_parser.add_argument(
        '-l',
        '--list-modules',
        action='store_true',
        help='List the available modules.',
    )
    open_parser.add_argument(
        '-a',
        '--all-modules',
        action='store_true',
        help='Open all the available modules.'
    )
    open_parser.set_defaults(func=open_tabs)
    # write tabs arguments
    write_parser = subparsers.add_parser('write')
    write_parser.add_argument(
        '-n',
        '--name',
        type=str,
        help='Names of the modules to add.'
    )
    write_parser.add_argument(
        '-p',
        '--path',
        type=str,
        help='File path to the module you are adding.'
    )
    write_parser.set_defaults(func=write_tabs)
    return parser.parse_args(test_args)


def open_tabs(tab, args):
    """
    Run the 'open' method on the tabs class.

    :param tab: An instance of the :class: `Tabs` class.
    :type tab: :class: `Tabs`
    :param args: The namespace from the parser.
    :type args: :class: `argparse.Namespace`
    """
    tab.open(args.modules, args.list_modules, args.all_modules)


def write_tabs(tab, args):
    """
    Run the 'write' method on the tabs class.

    :param tab: An instance of the :class: `Tabs` class.
    :type tab: :class: `Tabs`
    :param args: The namespace from the parser.
    :type args: :class: `argparse.Namespace`
    """
    tab.write(args.name, args.path)

if __name__ == '__main__':
    args = argument_parser()
    tab = Tabs(json_folder_mapping_path)
    args.func(tab, args)
